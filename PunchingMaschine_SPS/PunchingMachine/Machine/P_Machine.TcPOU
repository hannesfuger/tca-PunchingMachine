<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="P_Machine" Id="{0d8c50ec-918a-4b59-8662-1a71ca9d0388}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Machine 

VAR	
	// MachineConfig
	stCurMachineConfig				: ST_MachineConfig;
	fOverride						: LREAL;
	bCheckPosBeforeRun				: BOOL;
	
	/// Sequences	
	seqOpMode						: FB_Sequence;
	
	bMaintMat						: BOOL;
	bMaintTool						: BOOL;
	stPunchJob						: ST_PunchJob;
		
	/// Components	
	fbComponents					: FB_CompositionBase;

	// PunchParameters
	bMatLoaded						: BOOL;
	bContinuous						: BOOL;
	nCurRun							: UINT;
	nCurPunch						: UDINT;
	nCurMat							: UINT;	
	nCurMoveOverride				: REAL;
	
	fThresholdX						: LREAL;
	fThresholdY						: LREAL;
	
	stCoordinate					: ST_Coordinate;
	stNextCoordinate				: ST_Coordinate;
	nMaxPunches						: UDINT;
	
	fMaxDisplacementX				: LREAL;
	fMaxDisplacementY				: LREAL;
	
	bInitialized					: BOOL;
	eJobState						: E_JobState;
	
	rtSafety						: R_TRIG;
	
	bSafeDrive						: BOOL;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Init
Init();

bSafeDrive := fbSafety.SafetyOk AND fbSafetyLock.SafetyOk;

rtSafety(CLK:= NOT fbSafety.SafetyOk);

// SAFETY
IF rtSafety.Q THEN
	bInitialized := FALSE;
	seqOpMode.Start(E_OperationMode.eOperationMode_Halt);
	fbEventLog.WriteInfo(E_Event.eEvent_none, 'NOT HALT');
	
	IF eJobState = E_JobState.eJobState_running THEN
		eJobState := E_JobState.eJobState_stopped;
	END_IF
	
END_IF

// Run Components
fbEventLog.Run();
fbComponents.Run();

// Run Sequencer
seqOpMode.Enable := TRUE;
seqOpMode.Base(TRUE,FALSE);
CASE seqOpMode.SequenceId OF	
	E_OperationMode.eOperationMode_Maintenance:		_Maintenance();
	E_OperationMode.eOperationMode_Start:			_Start();
	E_OperationMode.eOperationMode_Stop:			_Stop();
	E_OperationMode.eOperationMode_Reset:			_Reset();
	E_OperationMode.eOperationMode_Halt:			_Halt();
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{a3c3c167-6bae-43eb-9a17-ee7ed08c2459}" />
    <Folder Name="Init" Id="{cd91c3b9-9472-40be-ac4b-a2f3e03535a6}" />
    <Folder Name="OpMode" Id="{448a1300-4b08-45ae-8e7d-de4a05de0e2f}" />
    <Folder Name="Properties" Id="{b605d9af-9bd3-4b7a-aaeb-943cf423fa8f}" />
    <Folder Name="Utilities" Id="{043088c3-1de5-4927-9556-8f5875bcaa03}" />
    <Method Name="_Halt" Id="{8d0cc817-fb11-4d04-b110-815d1ab018d5}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD _Halt : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seqOpMode.Name := 'Halt';

CASE seqOpMode.Step OF
	
0	 :	seqOpMode.StepDefinition('Move to Zero Position', T#0S);
		fbPunchEngine.Halt();
		fbMatAndToolHandling.Halt();
		seqOpMode.NextStepDelay(T#1S, 10);	
		
10	 :	//fbSafetyLock.Unlock();
		seqOpMode.Finish();
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Maintenance" Id="{abd94d62-471b-4022-9d8a-d646a4da430c}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD _Maintenance : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seqOpMode.Name := 'Maintenance';

CASE seqOpMode.Step OF
	

0	 :	seqOpMode.StepDefinition('Move PunchEngine to Maint Position', T#0S);	
		fbPunchEngine.MoveTDC();			
		fbPunchEngine.OutletBeltseq(FALSE, 0);
		seqOpMode.NextStep(10);
	
10	 :	IF fbPunchEngine.TDC THEN
			seqOpMode.NextStep(20);		
		END_IF
		
20	 :	seqOpMode.StepDefinition('Move XY to Maint Position', T#0S);	
		fbMatAndToolHandling.MaintPos(NOT bMaintMat, NOT bMaintTool);	
		seqOpMode.NextStep(30);			
	
30	 :	IF fbMatAndToolHandling.TargetReached THEN 	
			seqOpMode.Finish();		
			//fbSafetyLock.Unlock();
		END_IF

			
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Reset" Id="{b7ea65e0-91e4-4978-951d-b3671362c880}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD _Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE seqOpMode.Step OF

	0:	seqOpMode.StepDefinition('reset, init reset WF', T#0S);
		
		fbSafetyLock.Lock();
		bInitialized := FALSE;
		fbComponents.ResetComponents(FALSE, FALSE, 0, 0);
		
		fbEventLog.Mute := TRUE;
		fbEventLog.Reset();	
		
		seqOpMode.NextStepDelay(T#200MS, 10);	// skip safety

	10:	seqOpMode.StepDefinition('Reset: wait for request', T#0S);
		fbSafety.Reset();
		seqOpMode.NextStep(20);
		
	20:	seqOpMode.StepDefinition('Reset safety', T#0S);
		seqOpMode.NextStepTransition(30, fbSafety.State = E_ComponentState.eComponentState_running);
	
	30:	seqOpMode.StepDefinition('Reset all components', T#0S);
		fbComponents.ResetComponents(FALSE, FALSE, eComponentType_none, eComponentType_Safety);
		seqOpMode.NextStep(40);
		
	40:	seqOpMode.StepDefinition('wait for components ready...', T#0S);
		seqOpMode.NextStepTransitionDelay(fbComponents.CompostitionState = E_ComponentState.eComponentState_running, T#5S,  50);
		
	50:	seqOpMode.StepDefinition('Move to Zero Position', T#0S);
		fbPunchEngine.MoveTDC();
		fbPunchEngine.OutletBeltseq(FALSE, 0);
		seqOpMode.NextStep(60);	
		
	60:	IF fbPunchEngine.TDC THEN
			seqOpMode.NextStep(70);	
		END_IF
			
	70:	seqOpMode.StepDefinition('Finish', T#0S);
		fbEventLog.Mute := FALSE;
		fbEventLog.Reset();
		bInitialized := TRUE;
		seqOpMode.Finish();
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Start" Id="{05d25d84-933c-490b-b706-1f4b0edc50bb}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD _Start : BOOL
VAR
	fTime				: LREAL;
	stTmpPosition		: ST_Coordinate;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[seqOpMode.Name := 'Start';

CASE seqOpMode.Step OF
	
/// MAT LOOP

0	 :	seqOpMode.StepDefinition('Check Mat', T#0S);
		
		fbSafetyLock.Lock();
		IF NOT bInitialized THEN			// AUTO INIT
			seqOpMode.NextSequenceId := eOperationMode_Start;
			seqOpMode.Start(E_operationMode.eOperationMode_Reset);
			RETURN;
		END_IF
		
		IF NOT fbMatAndToolHandling.Ready OR NOT fbPunchEngine.Ready THEN
			RETURN;
		END_IF

		IF nCurMat > MATS_COUNT THEN
			fbPunchEngine.MoveTDC();
			fbMatAndToolHandling.MoveRelX(stCurMachineConfig.fMoveOutside ,stCurMachineConfig.fVelocityX, stCurMachineConfig.fAccelerationX);
			fbEventLog.WriteInfo(E_Event.eEvent_none, 'no further Mat Found');
			seqOpMode.NextStep(5);		
			RETURN;
		END_IF		

		IF stPunchJob.abMultipleMats[nCurMat] THEN
			fbMatAndToolHandling.SetupMat(fbMat.Mat.astMatOrigins[nCurMat]);	
			fbPunchEngine.MoveTDC();
			seqOpMode.NextStep(10);
		ELSE	
			nCurMat:= nCurMat + 1;
		END_IF	
		
5	 :	seqOpMode.StepDefinition('Finish Job', T#0S);
		IF fbMatAndToolHandling.TargetReached AND fbPunchEngine.TDC THEN
			fbPunchEngine.OutletBeltOnce();		
			eJobState := E_JobState.eJobState_finished;
			Halt();
		END_IF
		
10	 :	seqOpMode.StepDefinition('Move PunchEngine to Zero Position', T#0S);
		IF fbPunchEngine.TDC THEN
			seqOpMode.NextStep(20);		
		END_IF

/// RUN LOOP		
		
20	 :	seqOpMode.StepDefinition('Check Run if active', T#0S);		
		IF nCurRun > MATRUNS_COUNT THEN
			fbEventLog.WriteInfo(E_Event.eEvent_none, 'no further Run Found');
			nCurMat:= nCurMat + 1;
			nCurRun := 0;		
			seqOpMode.NextStep(0);
			RETURN;
		END_IF

		CASE stPunchJob.astRunTodo[nCurRun] OF			
			E_RunTodo.Punch_Tool_1:	
				fbMatAndToolHandling.SetupToolholder(1,fbMat.Mat.astRuns[nCurRun].stToolHolder.fX_Offset, fbMat.Mat.astRuns[nCurRun].stToolHolder.fY_Offset);
				fbMatAndToolHandling.ChangeTool(1);
				seqOpMode.NextStep(30);	
			
			E_RunTodo.Punch_Tool_2:	
				fbMatAndToolHandling.SetupToolholder(2,fbMat.Mat.astRuns[nCurRun].stToolHolder.fX_Offset, fbMat.Mat.astRuns[nCurRun].stToolHolder.fY_Offset);
				fbMatAndToolHandling.ChangeTool(2);
				seqOpMode.NextStep(30);		
				
			ELSE
				nCurRun := nCurRun + 1;			
		END_CASE

30	 :	seqOpMode.StepDefinition('Changing Tool', T#0S);
		IF fbMatAndToolHandling.ToolChanged THEN
			seqOpMode.NextStep(40);
		END_IF
		
40	 :	seqOpMode.StepDefinition('Prepare Data of current Run', T#0S);
		nMaxPunches := fbMat.Count_HolesOfRun(nCurRun);			
		fMaxDisplacementX	:= 0;
		fMaxDisplacementY	:= 0;
		
		
		// get Coordiantes of MatRun
		IF fbMat.SortRun(nCurRun) <> E_OperationResult.eOperationResult_Ok THEN		
			fbEventLog.WriteWarning(E_Event.eEvent_none, 'Error while sorting Coordinate-Array', FALSE);
			seqOpMode.Finish();
			RETURN;
		END_IF
				
		IF fbMat.ResortCoordinates(E_CoordinatesSortState.eCoordinatesSortState_resorted_v1) <> E_OperationResult.eOperationResult_Ok THEN
			fbEventLog.WriteWarning(E_Event.eEvent_none, 'Error while resorting Coordinate-Array', FALSE);
			seqOpMode.Finish();
			RETURN;
		END_IF
				

		// Set/Calc Override, Velocity, Acceleratopn of Punch	
		nCurMoveOverride := SEL(fbMat.Mat.astRuns[nCurRun].fMoveOverride = 0, INT_TO_REAL(fbMat.Mat.astRuns[nCurRun].fMoveOverride), 100)/100;
		
		fThresholdX:= SEL(fbMat.Mat.astRuns[nCurRun].fThresholdX = -1, fbMat.Mat.astRuns[nCurRun].fThresholdX, fbMat.MaxDistanceX);
		fThresholdY:= SEL(fbMat.Mat.astRuns[nCurRun].fThresholdY = -1, fbMat.Mat.astRuns[nCurRun].fThresholdY, fbMat.MaxDistanceY);
		fTime := fbMatAndToolHandling.GetMovementTime(  fThresholdX, 
													    fThresholdY,
														stCurMachineConfig.fVelocityX,
														stCurMachineConfig.fAccelerationX*nCurMoveOverride, 
														stCurMachineConfig.fVelocityY,
														stCurMachineConfig.fAccelerationY);	
		fbPunchEngine.SetupPunch(fbMat.Mat.fHeight, stCurMachineConfig.fSaftyDistanceToMat, stCurMachineConfig.fVelocityPunch, stCurMachineConfig.fAccelerationPunch, fTime);
		Override := SEL(fbMat.Mat.astRuns[nCurRun].fPunchOverride = 0, fbMat.Mat.astRuns[nCurRun].fPunchOverride, 100);
		
		// Calculate Coordinates		
		IF fbMat.GetCoordinate(nCurRun, nCurPunch, ADR(stCoordinate)) = E_OperationResult.eOperationResult_NOk THEN
			fbEventLog.WriteWarning(E_Event.eEvent_none, 'Error in getting Coordinate', FALSE);
			seqOpMode.Finish();
			RETURN;
		END_IF	
		
		stCoordinate.fX := stCoordinate.fX + stCurMachineConfig.stMatOrigin.fX;	
		stCoordinate.fY := stCoordinate.fY + stCurMachineConfig.stMatOrigin.fY;		
		
		
		// Move to Coordinate
		stTmpPosition := stCoordinate;
		stTmpPosition.fX := stTmpPosition.fX - stCurMachineConfig.fPassDistance;
		fbMatAndToolHandling.MoveAbs(	stTmpPosition, 
										stCurMachineConfig.fVelocityX, 
										stCurMachineConfig.fAccelerationX, 
										stCurMachineConfig.fVelocityY, 
										stCurMachineConfig.fAccelerationY);	

			
		seqOpMode.NextStep(45);		
		
45	 : 	seqOpMode.StepDefinition('Start from the same Direction', T#0S);
		IF fbMatAndToolHandling.TargetReached THEN
			fbMatAndToolHandling.MoveAbs(	stCoordinate, 
											stCurMachineConfig.fVelocityX, 
											stCurMachineConfig.fAccelerationX*nCurMoveOverride, 
											stCurMachineConfig.fVelocityY, 
											stCurMachineConfig.fAccelerationY);			
			seqOpMode.NextStep(50);		
		END_IF	
			
50	 : 	seqOpMode.StepDefinition('Move to First Position Before Loop', T#0S);
		IF fbMatAndToolHandling.TargetReached AND NOT bCheckPosBeforeRun THEN	
			seqOpMode.NextStep(60);		
		END_IF		
		
		IF seqOpMode.NextSequence THEN
			seqOpMode.Finish();
			RETURN;
		END_IF		
		
// PUNCHING LOOP
	
60	 :	seqOpMode.StepDefinition('Preparing', T#0S);
		IF fbMat.GetCoordinate(nCurRun, nCurPunch, ADR(stCoordinate)) = E_OperationResult.eOperationResult_NOk THEN
			fbEventLog.WriteWarning(E_Event.eEvent_none, 'Error in getting Coordinate', FALSE);
			seqOpMode.Finish();
			RETURN;
		END_IF	
		
		// outletbelt	
		IF fbMat.Mat.astRuns[nCurRun].bOutletbelt THEN
			fbPunchEngine.OutletBeltSeq(TRUE, fbMat.Mat.astRuns[nCurRun].nOutletbeltIntervall);
		END_IF
		
		// get next Coordinate	
		fbMat.GetCoordinate(nCurRun, nCurPunch+1, ADR(stNextCoordinate));
			
		IF seqOpMode.NextSequence THEN
			bContinuous := FALSE;
		ELSIF nCurPunch + 1 >= nMaxPunches THEN
			bContinuous := FALSE;
		ELSIF ABS(stNextCoordinate.fX - stCoordinate.fX) <= (fThresholdX + 0.1)				/// Nummerischer Fehler beim Berechnen des Treshholds wird mit 0.1 ausgeglichen 
		  AND ABS(stNextCoordinate.fY - stCoordinate.fY) <= (fThresholdY + 0.1) THEN
			bContinuous := TRUE;
		ELSE
			bContinuous := FALSE;
		END_IF
		
		// Calculate Asolute Coordinates
		stCoordinate.fX := stCoordinate.fX + stCurMachineConfig.stMatOrigin.fX;
		stCoordinate.fY := stCoordinate.fY + stCurMachineConfig.stMatOrigin.fY;		
		
		// Move to Coordinate
		fbMatAndToolHandling.MoveAbs(	stCoordinate, 
										stCurMachineConfig.fVelocityX, 
										stCurMachineConfig.fAccelerationX*nCurMoveOverride, 
										stCurMachineConfig.fVelocityY, 
										stCurMachineConfig.fAccelerationY);		
										
		IF fbPunchEngine.Punching THEN
			fbPunchEngine.Punch(bContinuous);
			seqOpMode.NextStep(80);	
		ELSE
			seqOpMode.NextStep(70);			
		END_IF	
		
70	 :	seqOpMode.StepDefinition('Moving', T#0S);
		// Anforderung auf Operationsmoduswechsel
		IF seqOpMode.NextSequence THEN
			seqOpMode.Finish();
			RETURN;
		END_IF		


		IF fbMatAndToolHandling.TargetReached THEN	
			fbPunchEngine.Punch(bContinuous);
			seqOpMode.NextStep(80);		
		END_IF		
		
80	 :	seqOpMode.StepDefinition('Punching', T#0S);

		// Wenn nicht durchgehend gestanzt wird warten bis der Stanzprozess abgeschlossen ist
		IF NOT bContinuous AND fbPunchEngine.Punching THEN
			RETURN;
		END_IF
	
		// Überprüfe den Unterschied zwischen IST/SOLL Position -> FEHLER bei zu hohem Unterschied
		IF fbPunchEngine.PunchDone THEN		
			stTmpPosition := fbMatAndToolHandling.Position;
			fMaxDisplacementX := MAX(fMaxDisplacementX, ABS(stCoordinate.fX - stTmpPosition.fX));
			fMaxDisplacementY := MAX(fMaxDisplacementY, ABS(stCoordinate.fY - stTmpPosition.fY));	
			nCurPunch := nCurPunch + 1;
			seqOpMode.NextStep(60);	
		END_IF
		
		// Keine weitere Stanzung in diesem Durchgang 
		IF nCurPunch >= nMaxPunches THEN
			fbEventLog.WriteInfo(E_Event.eEvent_none, 'Run Finished');
			fbPunchEngine.OutletBeltSeq(FALSE, 0);
			nCurPunch := 0;
			nCurRun := nCurRun + 1;
			seqOpMode.NextStep(20);	
			RETURN;
		END_IF	
		

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Stop" Id="{6183ad43-eef9-48a2-acec-0f977ca27297}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD _Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seqOpMode.Name := 'Stop';

CASE seqOpMode.Step OF
	
0	 :	seqOpMode.StepDefinition('Move Punch to Zero Position', T#0S);
		fbPunchEngine.MoveTDC();
		fbPunchEngine.OutletBeltOnce();
		seqOpMode.NextStep(10);	
		
10	 :	seqOpMode.StepDefinition('Move Punch to Zero Position', T#0S);	
		IF fbPunchEngine.TDC THEN
			seqOpMode.NextStep(20);	
		END_IF
	
20	 :	seqOpMode.StepDefinition('Move Y-Axis to Zero Position', T#0S);		
		fbMatAndToolHandling.MoveAbsY(10, stCurMachineConfig.fVelocityX, stCurMachineConfig.fAccelerationX); //TODO: not hardcoded Position
		seqOpMode.NextStep(30);	

30	 :  IF fbMatAndToolHandling.TargetReached THEN
			fbPunchEngine.OutletBeltOnce();	
			seqOpMode.NextStepDelay(T#1S, 40);	
		END_IF	
		
40	 :	seqOpMode.StepDefinition('Stop finished', T#0S);	
		//fbSafetyLock.Unlock();
		seqOpMode.Finish();
		
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="CheckPosBeforeRun" Id="{d1e8ce50-5236-41a0-a206-fca240d6a6d4}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CheckPosBeforeRun : BOOL]]></Declaration>
      <Get Name="Get" Id="{4a5e9e39-3857-4c8a-bd10-551b4a073418}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckPosBeforeRun := bCheckPosBeforeRun;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9805bd54-545a-47ef-be74-dbe6db912555}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bCheckPosBeforeRun := CheckPosBeforeRun;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ClearJob" Id="{7dc5521b-7346-4d08-b6cd-22f877e745f2}" FolderPath="Utilities\">
      <Declaration><![CDATA[METHOD ClearJob : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nCurRun := 0;
nCurPunch := 0;
nCurMat := 0;
MEMSET(ADR(stPunchJob), 0, SIZEOF(stPunchJob));

eJobState := E_JobState.eJobState_none;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="CountAllHolesOfJob" Id="{bcd541cf-b00f-47ca-be15-45867cffb802}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CountAllHolesOfJob : UDINT]]></Declaration>
      <Get Name="Get" Id="{fe27e395-0315-40c4-aa83-495f4ffcf7c4}">
        <Declaration><![CDATA[VAR
	ni						: UINT;
	nMats					: UINT;
	nPunchCount				: UDINT;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT bMatLoaded THEN
	RETURN;
END_IF

nMats := 0;
FOR ni := 0 TO MATS_COUNT DO
	IF 	stPunchJob.abMultipleMats[ni] THEN
		nMats := nMats + 1;
	END_IF
END_FOR

IF nMats = 0 THEN
	RETURN;
END_IF

nPunchCount := 0;
FOR ni := 0 TO MATRUNS_COUNT DO
	IF stPunchJob.astRunTodo[ni] = 0 THEN
		CONTINUE;
	END_IF
	nPunchCount := nPunchCount + fbMat.Count_HolesOfRun(ni);
END_FOR

CountAllHolesOfJob := nPunchCount * nMats;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CountRemainHolesOfJob" Id="{e91f8ffb-8807-4020-80d9-c4c2746e5856}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CountRemainHolesOfJob : UDINT]]></Declaration>
      <Get Name="Get" Id="{cc1207f5-9cfe-4f8c-840e-29195922b115}">
        <Declaration><![CDATA[VAR
	ni						: UINT;
	nMats					: UINT;
	nPunchCount				: UDINT;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT bMatLoaded THEN
	RETURN;
END_IF

nMats := 0;
FOR ni := nCurMat TO MATS_COUNT DO
	IF 	stPunchJob.abMultipleMats[ni] THEN
		nMats := nMats + 1;
	END_IF
END_FOR

IF nMats = 0 THEN
	RETURN;
END_IF

nPunchCount := 0;
FOR ni := nCurRun TO MATRUNS_COUNT DO
	IF stPunchJob.astRunTodo[ni] = 0 THEN
		CONTINUE;
	END_IF
	nPunchCount := nPunchCount + fbMat.Count_HolesOfRun(ni);
END_FOR

CountRemainHolesOfJob := nPunchCount * nMats - nCurPunch;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurMat" Id="{6ae330f2-62c1-417b-adea-4e858716c937}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurMat : UINT]]></Declaration>
      <Get Name="Get" Id="{dab8f04e-a273-4cd3-a985-2c96e9aa8c81}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurMat := nCurMat;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurPunch" Id="{bf013849-d40f-4942-bc33-6f60ec39ae15}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurPunch : UDINT]]></Declaration>
      <Get Name="Get" Id="{89ac6a9c-2a98-46ac-a230-3bbaba97c8e5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurPunch := nCurPunch;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurRun" Id="{a552c20f-8cac-4544-9764-39fa183f1bc9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurRun : UINT]]></Declaration>
      <Get Name="Get" Id="{88b4c6bc-6865-4c6a-99cc-325992d3207e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurRun := nCurRun;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Halt" Id="{efddaa5b-9660-496c-a523-94c2986c5dee}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Halt : E_OperationResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Halt := E_OperationResult.eOperationResult_NOk;

//ClearJob();
seqOpMode.Start(E_OperationMode.eOperationMode_Halt);

Halt := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{5beb4bc6-6c7b-4b75-9b3b-07a0dc189c65}" FolderPath="Init\">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR
	stLogConfig						: ST_LoggingConfig;
	stPlcAppSystemInfo				: PlcAppSystemInfo;
END_VAR

VAR_STAT
	OnlineChangesMirror				: UDINT;		
	FirstRun						: BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Init on OnlineChange
stPlcAppSystemInfo := Statics.stPlcSystemInfo.stPlcAppSystemInfo;
IF OnlineChangesMirror <> stPlcAppSystemInfo.OnlineChangeCnt OR FirstRun THEN
	OnlineChangesMirror := stPlcAppSystemInfo.OnlineChangeCnt;
	FirstRun := FALSE;
	
	InitComponents();
	InitConfig();

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitComponents" Id="{073cd59f-ca6a-43ca-851c-8fedfb1ab58b}" FolderPath="Init\">
      <Declaration><![CDATA[METHOD InitComponents : BOOL
VAR
	stLogConfig						: ST_LoggingConfig;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Eventlog
stLogConfig.eLoggingProvider := E_LoggingProvider.eLoggingProviderEventLog;	
stLogConfig.sLogName := 'Punch.log';	
stLogConfig.sLogPath := 'C:\Log\Punch';									
stLogConfig.eLogLevel := E_LogLevel.eLogLevelInformation; 				
fbEventLog.Config := stLogConfig;
fbEventLog.Reset();

fbComponents.LoadComponents();	
fbComponents.Active := TRUE;
fbComponents.Name := 'Collection of all Components';
fbComponents.SetEventLogReference(fbEventLog);	

/// Supervison
fbComponents.RegisterComponent(1, fbSupervision);
fbSupervision.Active := TRUE;
fbSupervision.Name := 'Supervision';
fbSupervision.MachineArea := .eMachineArea_common;

/// Ethercat-Bus
fbComponents.RegisterComponent(2, fbEtherCATBus);
fbEtherCATBus.Active := TRUE;
fbEtherCATBus.Name := 'EtherCAT Bus';
fbEtherCATBus.MachineArea := E_MachineArea.eMachineArea_common;
fbEtherCATBus.SetReferences(COMP.stEtherCATState);

/// Safety
fbComponents.RegisterComponent(3, fbSafety);
fbSafety.Active := TRUE;
fbSafety.Name := 'Safety';
fbSafety.MachineArea := E_MachineArea.eMachineArea_common;
fbSafety.SetReferences(COMP.stSafetyIO);

/// Mat
fbComponents.RegisterComponent(5, fbMat);
fbMat.Active := TRUE;
fbMat.Name := 'Mat Definition';
fbMat.MachineArea := E_MachineArea.eMachineArea_common;

/// Mat and Tool Handling
fbComponents.RegisterComponent(6, fbMatAndToolHandling);
fbMatAndToolHandling.Active := TRUE;
fbMatAndToolHandling.Name := 'Mat and Tool Handling';
fbMatAndToolHandling.MachineArea := E_MachineArea.eMachineArea_common;
fbMatAndToolHandling.Setup(E_Axis.eAxis_X, E_Axis.eAxis_Y, E_Cylinder.eCylinder_Toolselector);
//fbMatAndToolHandling.Override := 100;
fbMatAndToolHandling.SetupToolDistance(0, 278.7);
fbMatAndToolHandling.SetupEnable(bSafeDrive);

/// Punch Engine
fbComponents.RegisterComponent(4, fbPunchEngine);
fbPunchEngine.Active := TRUE;
fbPunchEngine.Name := 'Punch Engine';
fbPunchEngine.MachineArea := E_MachineArea.eMachineArea_common;
fbPunchEngine.Setup(E_Axis.eAxis_Punch, E_DigitalOutput.eDigitalOutput_OutletBelt);
//fbPunchEngine.Override := 100;
fbPunchEngine.SetupCrank(420, 20);
fbPunchEngine.SetupEnable(bSafeDrive);


/// Safety Lock
fbComponents.RegisterComponent(4, fbSafetyLock);
fbSafetyLock.Active := TRUE;
fbSafetyLock.Name := 'Punch Engine';
fbSafetyLock.MachineArea := E_MachineArea.eMachineArea_common;
fbSafetyLock.SetReferences(COMP.stSafetyLockIO);

Override := 10;

/// Add Log
fbEventLog.Logger.AddLog('System startup, configuration loaded.', sName, E_LogLevel.eLogLevelInformation);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitConfig" Id="{d048fa18-b357-4d6d-ae0f-62e152306f2c}" FolderPath="Init\">
      <Declaration><![CDATA[METHOD InitConfig : BOOL
VAR
	stConfig				: ST_MachineConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stConfig.stMatOrigin.fX := -20.5;
stConfig.stMatOrigin.fY := 343.5;

stConfig.fAccelerationX := 11000;//5500/2;
stConfig.fAccelerationY := 11000;//11000/2;
stConfig.fAccelerationPunch := 11000;

stConfig.fVelocityX := 660;
stConfig.fVelocityY := 660;
stConfig.fVelocityPunch := 900;

stConfig.fSaftyDistanceToMat := 0;

stConfig.stMaintPosition.fX := 10;
stConfig.stMaintPosition.fY := 10;
stConfig.stMaintPositionAlt.fX := 4050;
stConfig.stMaintPositionAlt.fY := 10;

stConfig.fMoveOutside := 440;
stConfig.fPassDistance := 2;

stConfig.nPunchTorqueLimit := 100;
stConfig.nPunchTorqueLimitNeg := 20;
stConfig.nPunchTorqueLimitPos := 100;

stConfig.nXTorqueLimit := 50;
stConfig.nYTorqueLimit := 100;

LoadConfig(stConfig);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="JobState" Id="{5408bbc4-92b1-47a4-aaa7-e48a225272b6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY JobState : E_Jobstate]]></Declaration>
      <Get Name="Get" Id="{bc8f731f-54d3-486c-bdc9-9fe6ed7fbd23}">
        <Declaration><![CDATA[VAR
	ni						: UINT;	
	bCheck					: BOOL;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[JobState := eJobState;

//JobState := E_JobState.eJobState_error;
//
//// check if there ist at least one Mat enabled
//bCheck := FALSE;
//FOR ni := 0 TO MATS_COUNT DO
//	IF 	stPunchJob.abMultipleMats[ni] THEN
//		bCheck := TRUE;
//		EXIT;
//	END_IF
//	CONTINUE;
//END_FOR
//IF NOT bCheck THEN
//	RETURN;
//END_IF
//
//// check if there ist at least one Run enabled
//bCheck := FALSE;
//FOR ni := 0 TO MATRUNS_COUNT DO	
//	IF stPunchJob.astRunTodo[ni] <> 0 THEN
//		bCheck := TRUE;
//		EXIT;
//	END_IF
//	CONTINUE;
//END_FOR
//IF NOT bCheck THEN
//	RETURN;
//END_IF
//
//// check differences between Todolist and mat
//FOR ni := 0 TO MATRUNS_COUNT DO
//	IF stPunchJob.astRunTodo[ni] <> 0 AND NOT fbMat.Mat.astRuns[ni].bActive THEN
//		RETURN;
//	END_IF
//END_FOR
//
//
//JobState := E_JobState.eJobState_ready;
//
//IF seqOpMode.SequenceId = eOperationMode_Start AND seqOpMode.State = eSequenceState_running THEN
//	JobState := E_JobState.eJobState_running;
//END_IF
//
//IF nCurRun + nCurPunch + nCurMat = 0 THEN
//	JobState := E_JobState.eJobState_stopped;
//END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="LoadConfig" Id="{7cd22898-429a-4ef9-afac-ce883356c33b}" FolderPath="Utilities\">
      <Declaration><![CDATA[METHOD LoadConfig : E_OperationResult
VAR_INPUT
	stConfig				: ST_MachineConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoadConfig := E_OperationResult.eOperationResult_NOk;

stCurMachineConfig := stConfig;

fbPunchEngine.TorqueLimit := stCurMachineConfig.nPunchTorqueLimit;
fbPunchEngine.TorqueLimitNeg := stCurMachineConfig.nPunchTorqueLimitNeg;
fbPunchEngine.TorqueLimitPos := stCurMachineConfig.nPunchTorqueLimitPos;

fbMatAndToolHandling.TorqueLimitX := stCurMachineConfig.nXTorqueLimit;
fbMatAndToolHandling.TorqueLimitY := stCurMachineConfig.nYTorqueLimit;

LoadConfig := E_OperationResult.eOperationResult_Ok;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadJob" Id="{06b9ba9d-0e6f-4218-8f2f-11979597d5f0}" FolderPath="Utilities\">
      <Declaration><![CDATA[METHOD LoadJob : E_OperationResult
VAR_INPUT
	PunchJob				: ST_PunchJob;
END_VAR

VAR
	ni						: UINT;	
	bCheck					: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoadJob := E_OperationResult .eOperationResult_NOk;

// CHECK IF SAME
//IF MEMCMP(ADR(PunchJob), ADR(stPunchJob), SIZEOF(ST_PunchJob)) = 0 THEN
//	LoadJob := E_OperationResult .eOperationResult_Ok;
//	RETURN;
//END_IF

IF eJobState = E_JobState.eJobState_running OR eJobState = E_JobState.eJobState_stopped THEN
	RETURN;
END_IF

// check if Mat is loaded
IF NOT bMatLoaded THEN
	RETURN;
END_IF



// check if there ist at least one Mat enabled
bCheck := FALSE;
FOR ni := 0 TO MATS_COUNT DO
	IF 	PunchJob.abMultipleMats[ni] THEN
		bCheck := TRUE;
		EXIT;
	END_IF
	CONTINUE;
END_FOR
IF NOT bCheck THEN
	RETURN;
END_IF

// check if there ist at least one Run enabled
bCheck := FALSE;
FOR ni := 0 TO MATRUNS_COUNT DO	
	IF PunchJob.astRunTodo[ni] <> 0 THEN
		bCheck := TRUE;
		EXIT;
	END_IF
	CONTINUE;
END_FOR
IF NOT bCheck THEN
	RETURN;
END_IF

// check differences between Todolist and mat
FOR ni := 0 TO MATRUNS_COUNT DO
	IF PunchJob.astRunTodo[ni] <> 0 AND NOT fbMat.Mat.astRuns[ni].bActive THEN
		RETURN;
	END_IF
END_FOR

stPunchJob := PunchJob;	
eJobState := E_JobState.eJobState_ready;

LoadJob := E_OperationResult .eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadMat" Id="{5368a477-ce06-442c-9236-a3910d39d411}" FolderPath="Utilities\">
      <Declaration><![CDATA[METHOD LoadMat : E_OperationResult
VAR_IN_OUT
	Mat						: ST_Mat;
END_VAR
VAR
	bMatOkay				: BOOL;
	ni						: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoadMat := E_OperationResult.eOperationResult_NOk;

bMatLoaded := FALSE;
bMatOkay := FALSE;

IF Mat.fLenght = 0 OR Mat.fWidth = 0 THEN
	RETURN;
END_IF

FOR ni := 0 TO MATRUNS_COUNT DO
	
	// check if there is at lest one active Run
	IF  Mat.astRuns[ni].bActive THEN
		bMatOkay := TRUE;
		EXIT;
	END_IF
	
END_FOR

IF NOT bMatOkay THEN
	RETURN;
END_IF

fbMat.LoadMat(Mat);

bMatLoaded := TRUE;
LoadMat := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MachineConfig" Id="{e153bf89-3003-472c-96dd-edebbbdf5ae6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MachineConfig : ST_MachineConfig]]></Declaration>
      <Get Name="Get" Id="{b36aac0a-98b0-4b86-b9b3-044c7700925f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MachineConfig := stCurMachineConfig;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5736b3e3-210a-4e49-b4fe-734cf8936bda}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stCurMachineConfig := MachineConfig;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Maint" Id="{1ce4f865-fa11-4f8e-80d7-e65b61200476}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Maint : E_OperationResult
VAR_INPUT
	Mat				: BOOL;
	Tool			: BOOL;
	Alt				: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Maint := E_OperationResult.eOperationResult_NOk;

IF eJobState = E_JobState.eJobState_running THEN
	eJobState := E_JobState.eJobState_stopped;
END_IF
seqOpMode.NextSequenceId := E_OperationMode.eOperationMode_Maintenance;

// load actual Maintposition
IF Alt THEN
	fbMatAndToolHandling.SetupMaintPos(stCurMachineConfig.stMaintPositionAlt);
ELSE
	fbMatAndToolHandling.SetupMaintPos(stCurMachineConfig.stMaintPosition);
END_IF
bMaintMat := Mat;
bMaintTool := Tool;

Maint := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MatLoaded" Id="{fbdd7173-1b91-4257-8f69-7d7585cff951}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MatLoaded : BOOL]]></Declaration>
      <Get Name="Get" Id="{25acb863-6fa5-4556-9b09-9ee0563f94ce}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MatLoaded := bMatLoaded;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MatOriginX" Id="{efd07f67-86da-4559-a465-623dd826c051}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MatOriginX : REAL]]></Declaration>
      <Get Name="Get" Id="{9fd3da1e-55bd-4633-8325-269168ceaf91}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MatOriginX := stCurMachineConfig.stMatOrigin.fX;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f45f4fd-f9b0-4230-b0ea-40dc0b8dc889}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stCurMachineConfig.stMatOrigin.fX := MatOriginX;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MatOriginY" Id="{6204fe5a-1cb7-4f53-af23-27d4e83ddd53}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MatOriginY : REAL]]></Declaration>
      <Get Name="Get" Id="{29851ec2-f24c-4972-9d7f-a89d46673d9e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MatOriginY := stCurMachineConfig.stMatOrigin.fY;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f559f516-85ee-4980-bb7c-c1bc0ce8ad1b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stCurMachineConfig.stMatOrigin.fY := MatOriginY;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MaxPunch" Id="{08fb3a28-1eda-4fba-bd61-541974b3f637}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MaxPunch : UDINT]]></Declaration>
      <Get Name="Get" Id="{16ab66ef-5ee7-4618-9723-ea13b782e356}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxPunch := nMaxPunches;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Override" Id="{0add2759-3c97-4992-acf8-86154fb24036}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Override : Lreal]]></Declaration>
      <Get Name="Get" Id="{d671ea66-b89c-423e-ab53-ac84404cb99d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Override := fOverride;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d0a59103-7b1e-45c3-b193-7041761db0b2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fOverride := Override;
fbPunchEngine.Override := Override;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Punching" Id="{54d2b23c-9c84-4db4-9337-4ccdacb1887a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Punching : BOOL]]></Declaration>
      <Get Name="Get" Id="{c6bfbe16-946b-48bb-a5c1-0544f877a627}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Punching := seqOpMode.SequenceId = eOperationMode_Start AND seqOpMode.State = eSequenceState_running ;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="RemainTimeOfJob" Id="{0480b95d-adb6-410c-b530-e88fa29fd0f2}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY RemainTimeOfJob : UDINT]]></Declaration>
      <Get Name="Get" Id="{f55c467b-7c01-4467-9b54-a63dc31e99b9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF fbPunchEngine.Velocity = 0 OR fOverride = 0 THEN
	RETURN;
END_IF

IF NOT Punching THEN
	RETURN;
END_IF

RemainTimeOfJob := LREAL_TO_UDINT(CountRemainHolesOfJob/(fbPunchEngine.Velocity/360)/fOverride*100/60);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{7f9e7617-df72-435e-9ceb-840bb7eb2c67}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Reset : E_OperationResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset := E_OperationResult.eOperationResult_NOk;

IF eJobState = E_JobState.eJobState_running THEN
	eJobState := E_JobState.eJobState_stopped;
END_IF
seqOpMode.Start(e_Operationmode.eOperationMode_Reset);

Reset := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resume" Id="{cd1c608f-4754-4f3c-89f1-c84c9e7f7fd3}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Resume : E_OperationResult
VAR_INPUT
END_VAR

VAR
	ni						: UINT;	
	bCheck					: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Resume := E_OperationResult.eOperationResult_NOk;

IF eJobState <> E_JobState.eJobState_ready AND eJobState <> E_JobState.eJobState_stopped THEN
	RETURN;
END_IF;;

IF Override = 0 THEN
	RETURN;
END_IF

eJobState := E_JobState.eJobState_running;
seqOpMode.Start(e_Operationmode.eOperationMode_Start);
Resume := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ResumeAllowed" Id="{c0f1c1aa-2034-4954-8ea2-0fb8cb7fcbb9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ResumeAllowed : BOOL]]></Declaration>
      <Get Name="Get" Id="{44cbb1e5-922f-4d67-9c36-df72e5614181}">
        <Declaration><![CDATA[VAR
	ni						: UINT;	
	bCheck					: BOOL;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ResumeAllowed := TRUE;

IF Punching THEN
	ResumeAllowed := FALSE;
	RETURN;	
END_IF

IF nCurRun + nCurPunch + nCurMat = 0 THEN
	ResumeAllowed := FALSE;
	RETURN;	
END_IF

// check if Mat is loaded
IF NOT bMatLoaded THEN
	ResumeAllowed := FALSE;
	RETURN;
END_IF

// check if there ist at least one Mat enabled
bCheck := FALSE;
FOR ni := 0 TO MATS_COUNT DO
	IF 	stPunchJob.abMultipleMats[ni] THEN
		bCheck := TRUE;
		EXIT;
	END_IF
	CONTINUE;
END_FOR
IF NOT bCheck THEN
	ResumeAllowed := FALSE;
	RETURN;
END_IF

// check if there ist at least one Run enabled
bCheck := FALSE;
FOR ni := 0 TO MATRUNS_COUNT DO	
	IF stPunchJob.astRunTodo[ni] <> 0 THEN
		bCheck := TRUE;
		EXIT;
	END_IF
	CONTINUE;
END_FOR
IF NOT bCheck THEN
	ResumeAllowed := FALSE;
	RETURN;
END_IF

// check differences between Todolist and mat
FOR ni := 0 TO MATRUNS_COUNT DO
	IF stPunchJob.astRunTodo[ni] <> 0 AND NOT fbMat.Mat.astRuns[ni].bActive THEN
		ResumeAllowed := FALSE;
		RETURN;
	END_IF
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Start" Id="{14a28483-6bb7-478f-933c-4c5d4e0212ad}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Start : E_OperationResult
VAR_INPUT
	PunchJob				: ST_PunchJob;
END_VAR

VAR
	ni						: UINT;	
	bCheck					: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Start := E_OperationResult.eOperationResult_NOk;

//IF fbSafetyLock.Opened THEN
//	RETURN;
//END_IF

ClearJob();
LoadJob(PunchJob);

IF Override = 0 THEN
	RETURN;
END_IF

eJobState := E_JobState.eJobState_running;
seqOpMode.Start(e_Operationmode.eOperationMode_Start);
Start := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{491817b2-2fa0-4bbe-8b92-f0e2f2be4718}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Stop : E_OperationResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Stop := E_OperationResult.eOperationResult_NOk;

seqOpMode.NextSequenceId := E_OperationMode.eOperationMode_Stop;

IF eJobState = E_JobState.eJobState_running THEN
	eJobState := E_JobState.eJobState_stopped;
END_IF

Stop := E_OperationResult.eOperationResult_Ok;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="P_Machine">
      <LineId Id="292" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="514" Count="1" />
      <LineId Id="512" Count="1" />
      <LineId Id="471" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="320" Count="1" />
      <LineId Id="382" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="297" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine._Halt">
      <LineId Id="9" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="62" Count="1" />
    </LineIds>
    <LineIds Name="P_Machine._Maintenance">
      <LineId Id="70" Count="19" />
      <LineId Id="96" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine._Reset">
      <LineId Id="9" Count="2" />
      <LineId Id="82" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="99" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine._Start">
      <LineId Id="9" Count="3" />
      <LineId Id="282" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="1073" Count="1" />
      <LineId Id="889" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="936" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="1079" Count="3" />
      <LineId Id="888" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="746" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="885" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="879" Count="0" />
      <LineId Id="954" Count="1" />
      <LineId Id="957" Count="0" />
      <LineId Id="965" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="444" Count="1" />
      <LineId Id="900" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="448" Count="1" />
      <LineId Id="442" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="538" Count="0" />
      <LineId Id="1050" Count="0" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="827" Count="0" />
      <LineId Id="1051" Count="0" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1067" Count="1" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1052" Count="0" />
      <LineId Id="1031" Count="5" />
      <LineId Id="1024" Count="0" />
      <LineId Id="846" Count="0" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1039" Count="3" />
      <LineId Id="1038" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="1037" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="966" Count="5" />
      <LineId Id="841" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="1003" Count="0" />
      <LineId Id="831" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="944" Count="1" />
      <LineId Id="961" Count="3" />
      <LineId Id="959" Count="0" />
      <LineId Id="946" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="829" Count="0" />
      <LineId Id="826" Count="0" />
      <LineId Id="855" Count="0" />
      <LineId Id="857" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="990" Count="2" />
      <LineId Id="989" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="578" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="972" Count="0" />
      <LineId Id="976" Count="0" />
      <LineId Id="973" Count="1" />
      <LineId Id="684" Count="0" />
      <LineId Id="975" Count="0" />
      <LineId Id="679" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="688" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="689" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="548" Count="3" />
      <LineId Id="763" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="770" Count="0" />
      <LineId Id="768" Count="0" />
      <LineId Id="766" Count="1" />
      <LineId Id="729" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="914" Count="6" />
      <LineId Id="807" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="720" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="772" Count="2" />
      <LineId Id="771" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="737" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="598" Count="1" />
      <LineId Id="601" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="783" Count="3" />
      <LineId Id="820" Count="0" />
      <LineId Id="787" Count="2" />
      <LineId Id="602" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine._Stop">
      <LineId Id="9" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="124" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="63" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CheckPosBeforeRun.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CheckPosBeforeRun.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.ClearJob">
      <LineId Id="7" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CountAllHolesOfJob.Get">
      <LineId Id="5" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CountRemainHolesOfJob.Get">
      <LineId Id="5" Count="2" />
      <LineId Id="44" Count="10" />
      <LineId Id="19" Count="8" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CurMat.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CurPunch.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.CurRun.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Halt">
      <LineId Id="17" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Init">
      <LineId Id="6" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.InitComponents">
      <LineId Id="8" Count="6" />
      <LineId Id="16" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="18" Count="25" />
      <LineId Id="51" Count="5" />
      <LineId Id="2" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="116" Count="7" />
      <LineId Id="115" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="136" Count="3" />
      <LineId Id="142" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="90" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.InitConfig">
      <LineId Id="30" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.JobState.Get">
      <LineId Id="65" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="34" Count="4" />
      <LineId Id="40" Count="12" />
      <LineId Id="54" Count="5" />
      <LineId Id="61" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.LoadConfig">
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.LoadJob">
      <LineId Id="66" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="83" Count="3" />
      <LineId Id="67" Count="0" />
      <LineId Id="21" Count="4" />
      <LineId Id="29" Count="32" />
      <LineId Id="17" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="68" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.LoadMat">
      <LineId Id="6" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="17" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="5" />
      <LineId Id="60" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MachineConfig.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MachineConfig.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Maint">
      <LineId Id="33" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MatLoaded.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MatOriginX.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MatOriginX.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MatOriginY.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MatOriginY.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.MaxPunch.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Override.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Override.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Punching.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.RemainTimeOfJob.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Reset">
      <LineId Id="26" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Resume">
      <LineId Id="9" Count="0" />
      <LineId Id="141" Count="3" />
      <LineId Id="148" Count="2" />
      <LineId Id="146" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.ResumeAllowed.Get">
      <LineId Id="55" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="15" Count="10" />
      <LineId Id="58" Count="0" />
      <LineId Id="26" Count="12" />
      <LineId Id="60" Count="0" />
      <LineId Id="39" Count="5" />
      <LineId Id="61" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Start">
      <LineId Id="113" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="252" Count="1" />
      <LineId Id="262" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="239" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="153" Count="0" />
    </LineIds>
    <LineIds Name="P_Machine.Stop">
      <LineId Id="17" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>