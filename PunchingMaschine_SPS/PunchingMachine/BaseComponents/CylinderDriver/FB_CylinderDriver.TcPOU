<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.9">
  <POU Name="FB_CylinderDriver" Id="{a82aae65-7938-479c-b543-36a2ecf1026e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_CylinderDriver EXTENDS FB_ComponentBase IMPLEMENTS ITF_Cylinder, ITFComponent
VAR_INPUT
	bSafetyOk				: BOOL; // Freigabe von Sicherheit
	
	bEnableHp				: BOOL;	// Freigabe Grundposition
	bEnableWp				: BOOL;	// Freigabe Arbeitsposition
END_VAR
VAR_OUTPUT
	// Zylinder ist in Grundstellung (verzögert)
	bIsInHp	: BOOL;
	// Zylinder ist in Arbeitsstellung (verzögert)
	bIsInWp	: BOOL;
	// Zylinder Ist-Position
	eActPos	: E_CylinderPosition;
END_VAR
VAR
	/// IO reference
	stIn 	: REFERENCE TO ST_CylinderDriverIn;
	stOut 	: REFERENCE TO ST_CylinderDriverOut;
	
	bWpSensor				: BOOL := TRUE;
	bHpSensor				: BOOL := TRUE;
	
	// private var's
	eReqPos					: E_CylinderPosition;	// Zylinder Soll-Position
	fPositionValidationTime	: TIME := T#300MS; 		// Verweilzeit bis die jeweilige Endlage bestätigt wird.
	tImpulseTime 			: TIME := T#0S; 		// Ansteuerzeit für Impulsventile (0 deaktiviert die Impulssteuerung)
	fSupervisionTime		: TIME := T#5S; 		// Verweilzeit nach Ventilansteuerung, bis die Zylinderendlage geprüft wird (0 deaktiviert die Überwachung)
	tonValveChange			: TON;					// Zeit seit Veränderung der Ventilstellung
	tonIsInHp				: TON;					// Verzögerung in Grundstellung
	tonIsInWp				: TON;					// Verzögerung in Arbeitsstellung
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[///
/// Cylinder driver FB
/// TP/www.rmth.at/06.2015
///]]></ST>
    </Implementation>
    <Folder Name="Factory" Id="{346f54fe-1c67-416c-8f69-6c95d1377e0a}" />
    <Folder Name="Properties" Id="{280af190-36c4-4431-b31d-d2cb866e5894}" />
    <Property Name="ActualPosition" Id="{044de178-debb-4265-b0ad-9e61c441a597}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC ActualPosition : E_CylinderPosition]]></Declaration>
      <Get Name="Get" Id="{db805540-5ebb-454b-828f-16c80d784fc7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ActualPosition := eActPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="EnableHp" Id="{6cf16ccf-9211-49e8-bdb2-da85e2b751b8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC EnableHp : BOOL]]></Declaration>
      <Get Name="Get" Id="{78c54a39-512b-45fc-a57d-9b8eddb92d98}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableHp := bEnableHp;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{603fafc5-ff53-478e-8d7d-d4ce84fc79b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bEnableHp := EnableHp;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="EnableHpSensor" Id="{5e3a3ed7-0e74-47b4-8590-6a37261b3b12}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC EnableHpSensor : BOOL]]></Declaration>
      <Get Name="Get" Id="{c5015790-881a-491e-b71e-11d9f8f31897}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableHpSensor := bHpSensor;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{09d89112-ffd7-44c3-9e9b-f65d1a7935cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bHpSensor := EnableHpSensor;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="EnableWp" Id="{24f24d54-7f29-4d1a-a366-81fcc2765573}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC EnableWp : BOOL]]></Declaration>
      <Get Name="Get" Id="{948c9f3d-43bc-4ab7-b73b-bec0b9ce507f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableWp := bEnableWp;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a3bb4ec2-b5fb-4c42-b1c5-015f32a1fe44}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bEnableWp := EnableWp;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="EnableWpSensor" Id="{f6fb1351-4d30-4807-a918-43d7f2fc822b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC EnableWpSensor : BOOL]]></Declaration>
      <Get Name="Get" Id="{504bb3c9-b5b1-46a4-946b-207a2b0ad751}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableWpSensor := bWpSensor;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f814de94-6dbb-4e87-8e05-28a65841eab7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWpSensor := EnableWpSensor;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{126f9f7c-a89d-46b1-8119-30f3ff4fb321}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eTyp := E_ComponentType.eComponentType_Cylinder;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ImpulseTime" Id="{2eb02d44-cb99-4d9d-9681-b66c53100d09}" FolderPath="Properties\">
      <Declaration><![CDATA[// Ansteuerzeit für Impulsventile (0 deaktiviert die Impulssteuerung)
PROPERTY PUBLIC ImpulseTime : TIME]]></Declaration>
      <Get Name="Get" Id="{6ed0c4e4-6399-43ae-9774-f29f04703758}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Ansteuerzeit für Impulsventile (0 deaktiviert die Impulssteuerung)
ImpulseTime := tImpulseTime;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e9397767-16aa-4085-b446-123a1618e864}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Ansteuerzeit für Impulsventile (0 deaktiviert die Impulssteuerung)
tImpulseTime := ImpulseTime;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PositionValidationTime" Id="{7f08aeaf-2435-46d4-b450-f973addc6b32}" FolderPath="Properties\">
      <Declaration><![CDATA[/// Verweilzeit bis die jeweilige Endlage bestätigt wird.
PROPERTY PUBLIC PositionValidationTime : TIME]]></Declaration>
      <Get Name="Get" Id="{88b6b5e8-1110-404a-80dc-0b171fbc3189}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[/// Verweilzeit bis die jeweilige Endlage bestätigt wird.
PositionValidationTime := fPositionValidationTime;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{be136f34-3f1e-478f-98f0-20843a0d200d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[/// Verweilzeit bis die jeweilige Endlage bestätigt wird.
fPositionValidationTime := PositionValidationTime;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="RequestPosition" Id="{71c26901-5e60-43f8-8b28-291d5f1bbdef}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC RequestPosition : E_CylinderPosition]]></Declaration>
      <Get Name="Get" Id="{6c63a25f-2cb8-40d6-b546-1dec372b987c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RequestPosition := eReqPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{9554fe57-0fe8-45d4-8baf-0ce375ce1131}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// base logic run
SUPER^.Reset();

//ToHP();
tonValveChange(IN := FALSE);
tonIsInHp(IN := FALSE);
tonIsInWp(IN := FALSE);

eState := E_ComponentState.eComponentState_ready;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetValves" Id="{935e2cf7-22ae-418b-9435-aa75101323e7}">
      <Declaration><![CDATA[METHOD PUBLIC ResetValves
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(stOut) THEN
	sLastError := 'IO reference not set';
	eState := E_ComponentState.eComponentState_error;
	RETURN;
END_IF

// chk
IF NOT bSafetyOk THEN
	sClearText := 'Warte auf Sicherheit Ok';
	RETURN;
END_IF

eReqPos := eCylinderPosition_unknown;
stOut.bValveCylinderHp := FALSE;
stOut.bValveCylinderWp := FALSE;
tonValveChange(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{cc7b2bfb-3730-4f25-913f-7c5dc50032db}">
      <Declaration><![CDATA[/// Run component logic
{attribute 'object_name' := 'Run'}
METHOD Run : E_ComponentState
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// base logic run
Run := SUPER^.Run();

// chk
IF NOT (__ISVALIDREF(stIn) AND __ISVALIDREF(stOut)) THEN
	sLastError := 'IO reference not set';
	eState := E_ComponentState.eComponentState_error;
	RETURN;
END_IF



// definiere aktuelle Zylinderposition
IF (stIn.bCylinderSensorHp OR (NOT bHpSensor AND stOut.bValveCylinderHp)) AND NOT stIn.bCylinderSensorWp THEN
	eActPos := eCylinderPosition_hp;
ELSIF NOT stIn.bCylinderSensorHp AND (stIn.bCylinderSensorWp OR (NOT bWpSensor AND stOut.bValveCylinderWp)) THEN
	eActPos := eCylinderPosition_wp;
ELSE
	eActPos := eCylinderPosition_unknown;
END_IF

tonIsInHp(IN := (eActPos = eCylinderPosition_hp), PT := fPositionValidationTime);
bIsInHp := tonIsInHp.Q;

tonIsInWp(IN := (eActPos = eCylinderPosition_wp), PT := fPositionValidationTime);
bIsInWp := tonIsInWp.Q;

// Zeitmessung seit Veränderung der Ventilstellung 
tonValveChange(IN := TRUE, PT := tMaxTime);

// für Impulsventile (T#0S od. Wartungsmodus -> Funktion deaktiv)
IF tImpulseTime > T#0S AND tonValveChange.ET > tImpulseTime THEN
	stOut.bValveCylinderHp := FALSE;
	stOut.bValveCylinderWp := FALSE;
END_IF

// Zylinderüberwachung (T#0S -> Funktion deaktiv)
IF fSupervisionTime > T#0S AND tonValveChange.ET > fSupervisionTime AND eActPos <> eReqPos THEN
	IF eReqPos = eCylinderPosition_hp THEN
		sLastError := Concat(sName, ' Grundstellung nicht erreicht.');
		IF stIn.bCylinderSensorWp THEN
			sLastError := Concat(sLastError, ' Signal Arbeitsstellung steht noch an.');
		END_IF
		IF NOT stIn.bCylinderSensorHp THEN
			sLastError := Concat(sLastError, ' Signal Sensor Grundstellung fehlt.');
		END_IF
		IF __ISVALIDREF(fbEventLog) THEN		
			WriteError(E_Event.eEvent_none , sLastError);	
		END_IF
		eState := E_ComponentState.eComponentState_error;
	ELSIF eReqPos = eCylinderPosition_wp THEN
		sLastError := Concat(sName, ' Arbeitsstellung nicht erreicht.');
		IF stIn.bCylinderSensorHp THEN
			sLastError := Concat(sLastError, ' Signal Grundstellung steht noch an.');
		END_IF
		IF NOT stIn.bCylinderSensorWp THEN
			sLastError := Concat(sLastError, ' Signal Arbeitsstellung fehlt.');
		END_IF
		IF __ISVALIDREF(fbEventLog) THEN
			WriteError(E_Event.eEvent_none , sLastError);
		END_IF
		eState := E_ComponentState.eComponentState_error;
	END_IF
END_IF

//
]]></ST>
      </Implementation>
    </Method>
    <Property Name="SafetyOk" Id="{0d868bd4-59ca-491f-a4ed-46ca277f2418}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC SafetyOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{e3fa39fa-e134-4c18-adc3-e379a21e3d69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SafetyOk := bSafetyOk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{14d9cd63-7d2f-4b36-8775-fcf415ae1012}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bSafetyOk := SafetyOk;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SensorHp" Id="{2980b765-9a95-4a0c-87d3-a92f58655219}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC SensorHp : BOOL]]></Declaration>
      <Get Name="Get" Id="{eb8e15c7-1790-4971-9e70-646c8af40911}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __ISVALIDREF(stIn) THEN
	SensorHp := stIn.bCylinderSensorHp;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SensorWp" Id="{c88d5ca0-4b38-448d-a9d5-a27dc5a9f0ac}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC SensorWp : BOOL]]></Declaration>
      <Get Name="Get" Id="{97a1cec2-6595-4679-a436-f81ccd6fa7eb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __ISVALIDREF(stIn) THEN
	SensorWp := stIn.bCylinderSensorWp;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetImpulseTime" Id="{421100bf-2256-4d9c-98fb-a2fdf3d51a44}" FolderPath="Factory\">
      <Declaration><![CDATA[METHOD PUBLIC SetImpulseTime
VAR_INPUT
	/// Ansteuerzeit für Impulsventile (0 deaktiviert die Impulssteuerung)
	tTime : TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetIoReference" Id="{20cf7886-d27d-4c9d-a118-821f51be2f18}" FolderPath="Factory\">
      <Declaration><![CDATA[/// Set up reference dependencies.
{attribute 'object_name' := 'SetIoReference'}
METHOD SetIoReference
VAR_IN_OUT
	stRefIn		: ST_CylinderDriverIn;
	stRefOut	: ST_CylinderDriverOut;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stIn 	REF= stRefIn;
stOut 	REF= stRefOut;]]></ST>
      </Implementation>
    </Method>
    <Property Name="SupervisionTime" Id="{943f890e-c86e-4134-a850-43379d5cf33a}" FolderPath="Properties\">
      <Declaration><![CDATA[/// Verweilzeit nach Ventilansteuerung, bis die Zylinderendlage geprüft wird (0 deaktiviert die Überwachung)
PROPERTY PUBLIC SupervisionTime : TIME]]></Declaration>
      <Get Name="Get" Id="{81dc8b15-6348-4cf1-9d43-542913353ca2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[/// Verweilzeit nach Ventilansteuerung, bis die Zylinderendlage geprüft wird (0 deaktiviert die Überwachung)
SupervisionTime := fSupervisionTime;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e051b8ba-2f3f-4166-bc1c-40deb4bbf6a7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[/// Verweilzeit nach Ventilansteuerung, bis die Zylinderendlage geprüft wird (0 deaktiviert die Überwachung)
fSupervisionTime := SupervisionTime;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ToHP" Id="{97e530d7-0b7a-4d4c-8a20-ce952bab4715}">
      <Declaration><![CDATA[METHOD PUBLIC ToHP
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(stOut) THEN
	sLastError := 'IO reference not set';
	eState := E_ComponentState.eComponentState_error;
	RETURN;
END_IF

// chk
IF NOT bSafetyOk THEN
	sClearText := 'Warte auf Sicherheit Ok';
	RETURN;
ELSIF NOT bEnableHp THEN
	sClearText := 'Warte auf Freigabe Hp';
	RETURN;
END_IF

eReqPos := eCylinderPosition_hp;
stOut.bValveCylinderHp := TRUE;
stOut.bValveCylinderWp := FALSE;
tonValveChange(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToWP" Id="{7b3857aa-191a-43c9-bb8a-f0eb6e378844}">
      <Declaration><![CDATA[METHOD PUBLIC ToWP
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(stOut) THEN
	sLastError := 'IO reference not set';
	eState := E_ComponentState.eComponentState_error;
	RETURN;
END_IF

// chk
IF NOT bSafetyOk THEN
	sClearText := 'Warte auf Sicherheit Ok';
	RETURN;
ELSIF NOT bEnableWp THEN
	sClearText := 'Warte auf Freigabe WP';
	RETURN;
END_IF

eReqPos := eCylinderPosition_wp;
stOut.bValveCylinderHp := FALSE;
stOut.bValveCylinderWp := TRUE;
tonValveChange(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CylinderDriver">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ActualPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableHp.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableHp.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableHpSensor.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableHpSensor.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableWp.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableWp.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableWpSensor.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.EnableWpSensor.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.FB_init">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ImpulseTime.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ImpulseTime.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.PositionValidationTime.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.PositionValidationTime.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.RequestPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.Reset">
      <LineId Id="3" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ResetValves">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.Run">
      <LineId Id="3" Count="65" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SafetyOk.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SafetyOk.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SensorHp.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SensorWp.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SetImpulseTime">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SetIoReference">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SupervisionTime.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.SupervisionTime.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ToHP">
      <LineId Id="3" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CylinderDriver.ToWP">
      <LineId Id="3" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>